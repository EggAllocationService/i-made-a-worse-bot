/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url = uri('https://github.com/jitsi/jitsi-maven-repository/raw/master/releases/')
    }

    maven {
        url = uri('https://github.com/jitsi/jitsi-maven-repository/raw/master/snapshots/')
    }
      maven {
        url 'https://m2.dv8tion.net/releases'
    }
     maven {
    url 'https://jitpack.io'
  }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    implementation "net.dv8tion:JDA:5.0.0-beta.6"
    implementation 'com.google.protobuf:protobuf-java:3.20.1'
    // implementation 'ai.picovoice:porcupine-java:2.0.1'
    // uncomment above and comment below if you dont use aarch64
    implementation files('lib/wake.jar') // edited version of porqupine to force loading the raspberry pi library 
    
    
    implementation files('lib/vad.jar') // edited version of https://github.com/jitsi/jitsi-webrtc-vad-wrapper to improve compatability with aarch64, you
    

    implementation 'org.jitsi:jitsi-utils:1.0-45-gc3afb76'
    implementation 'com.github.walkyst:lavaplayer-fork:1.3.97'
    implementation 'com.github.aikaterna:lavaplayer-natives:original-SNAPSHOT'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.7.0'
    implementation 'com.alphacephei:vosk:0.3.33'
    implementation 'com.google.code.gson:gson:2.9.0'

}

application {
    // Define the main class for the application.
    mainClass = 'io.egg.badidea.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
